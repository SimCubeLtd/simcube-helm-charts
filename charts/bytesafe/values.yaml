image:
  repository: bytesafe/bytesafe-ce
  pullPolicy: IfNotPresent
  tag: "v1.0.13"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

replicaCount: 1

persistence:
  enabled: true
  accessMode: ReadWriteOnce
  existingClaim: ""
  ## If defined, storageClass: <storageClass>
  ## If set to "-", storageClass: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClass spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # existingClaim:
  # annotations:
  #  "helm.sh/resource-policy": keep
  storageClass: ""
  storageSize: 10Gi

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

statefulSet:
  annotations: {}
  labels: {}
  
pod:
  annotations: {}
  labels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 8081

ingress:
  enabled: false
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  ## @param postgresql.enabled Deploy PostgreSQL subchart
  ##
  enabled: true
  ## @param postgresql.nameOverride Override name of the PostgreSQL chart
  ##
  nameOverride: ""
  auth:
    ## @param postgresql.auth.existingSecret Existing secret containing the password of the PostgreSQL chart
    ##
    existingSecret: ""
    ## @param postgresql.auth.password Password for the postgres user of the PostgreSQL chart (auto-generated if not set)
    ## ref: https://hub.docker.com/_/postgres/
    ##
    password: ""
    ## @param postgresql.auth.username Username to create when deploying the PostgreSQL chart
    ##
    username: bytesafe
    ## @param postgresql.auth.database Database to create when deploying the PostgreSQL chart
    ##
    adminPassword: ""
    ## @param postgresql.auth.username Username to create when deploying the PostgreSQL chart
    ##
    adminUsername: postgres
    ## @param postgresql.auth.database Database to create when deploying the PostgreSQL chart
    ##
    database: bytesafe
  ## PostgreSQL Primary parameters
  ##
  primary:
    ## PostgreSQL Primary service configuration
    ##
    service:
      ## @param postgresql.primary.service.ports.postgresql PostgreSQL service port
      ##
      ports:
        postgresql: 5432
    ## PostgreSQL Primary persistence configuration
    ##
    persistence:
      ## @param postgresql.primary.persistence.enabled Enable PostgreSQL Primary data persistence using PVC
      ##
      enabled: true
      ## @param postgresql.primary.persistence.existingClaim Name of an existing PVC to use
      ##
      existingClaim: ""
      ## @param postgresql.primary.persistence.storageClass PVC Storage Class for PostgreSQL Primary data volume
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: ""
      ## @param postgresql.primary.persistence.accessMode PVC Access Mode for PostgreSQL volume
      ##
      accessMode: ReadWriteOnce
      ## @param postgresql.primary.persistence.size PVC Storage Request for PostgreSQL volume
      ##
      size: 8Gi
      
## External Database Configuration
## All of these values are only used when postgresql.enabled is set to false
##
externalDatabase:
  ## @param externalDatabase.enabled Use external Database
  ##
  enabled: false
  ## @param externalDatabase.host Host of an external PostgreSQL instance to connect (only if postgresql.enabled=false)
  ##
  host: "postgres"
  ## @param externalDatabase.user User of an external PostgreSQL instance to connect (only if postgresql.enabled=false)
  ##
  user: bytesafe
  ## @param externalDatabase.adminUser Admin User of an external PostgreSQL instance to connect (only if postgresql.enabled=false)
  ##
  adminUser: postgres
  ## @param externalDatabase.password Password of an external PostgreSQL instance to connect (only if postgresql.enabled=false)
  ##
  password: ""
  ## @param externalDatabase.adminPassword Admin Password of an external PostgreSQL instance to connect (only if postgresql.enabled=false)
  ##
  adminPassword: ""
  ## @param externalDatabase.existingSecret Secret containing the password of an external PostgreSQL instance to connect (only if postgresql.enabled=false)
  ## Name of an existing secret resource containing the DB password in a 'password' key
  ##
  existingSecret: ""
  ## @param externalDatabase.database Database inside an external PostgreSQL to connect (only if postgresql.enabled=false)
  ##
  database: bytesafe
  ## @param externalDatabase.port Port of an external PostgreSQL to connect (only if postgresql.enabled=false)
  ##
  port: 5432
  
redis:
  ## Bitnami Redis image
  ## ref: https://hub.docker.com/r/bitnami/redis/tags/
  ## @param redis.image.registry Redis image registry
  ## @param redis.image.repository Redis image repository
  ## @param redis.image.tag Redis image tag (immutable tags are recommended)
  ## @param redis.image.digest Redis image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param redis.image.pullPolicy Redis image pull policy
  ## @param redis.image.pullSecrets Redis image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 7.4.1-debian-12-r1
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []

  ## @param redis.enabled Enable Redis dependency
  ##
  enabled: true

  ## @param redis.nameOverride Name override for the Redis dependency
  ##
  nameOverride: "bytesafe-redis"
  ## @param redis.service.port Service port for Redis dependency
  ##
  service:
    port: 6379

  ## Use password authentication
  ## @param redis.auth.enabled Enable Redis dependency authentication
  ## @param redis.auth.existingSecret Existing secret to load redis dependency password
  ## @param redis.auth.existingSecretPasswordKey Pasword key name inside the existing secret
  ##
  auth:
    enabled: true
    ## Name of existing secret object containing the password
    ##
    existingSecret: ""
    ##
    ## Password key to be retrieved from Redis&reg; secret
    ##
    existingSecretPasswordKey: 'redis-password'

  ## Cluster settings
  ## @param redis.architecture Redis&reg; architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: standalone

##
## External Redis&reg;
##
externalRedis:
  ## @param externalRedis.enabled Enable External Redis
  ##
  enabled: false
  ## Redis&reg; host
  ## @param externalRedis.host External Redis host
  ##
  host: "redis"
  ## Redis&reg; port
  ## @param externalRedis.port External Redis port
  ##
  port: 6379
  ## Redis&reg; password for authentication
  ## Ignored if existingSecret is set
  ## @param externalRedis.password External Redis password
  ##
  password: ""
  ## Name of existing secret object containing the password
  ## @param externalRedis.existingSecret Existing secret for the external redis
  ##
  existingSecret: ""
  ## Password key to be retrieved from Redis&reg; secret
  ## @param externalRedis.existingSecretPasswordKey Password key for the existing secret containing the external redis password
  ##
  existingSecretPasswordKey: ""
  
smtp:
  enabled: false
  host: ""
  port: 587
  user: ""
  password: ""
  from: ""
  
telemetry: true
allowPrivateIps: false
urlPrefix: "http://localhost:8081"
  
masterEncryptionKey: ""

## Wait-for-redis init container configuration
##
redisWait:
  ## @param redisWait.enabled Enables waiting for redis
  ##
  enabled: true
  ## @param redisWait.extraArgs Additional arguments for the redis-cli call, such as TLS
  ##
  extraArgs: ''
  ## @param redisWait.securityContext Security context for init container
  ##
  securityContext: {}
